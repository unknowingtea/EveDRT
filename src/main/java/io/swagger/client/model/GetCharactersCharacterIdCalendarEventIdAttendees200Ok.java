/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * character_id and response of an attendee
 */
@Schema(description = "character_id and response of an attendee")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-12-18T15:18:58.117336-05:00[America/New_York]")
public class GetCharactersCharacterIdCalendarEventIdAttendees200Ok {
  @SerializedName("character_id")
  private Integer characterId = null;

  /**
   * event_response string
   */
  @JsonAdapter(EventResponseEnum.Adapter.class)
  public enum EventResponseEnum {
    DECLINED("declined"),
    NOT_RESPONDED("not_responded"),
    ACCEPTED("accepted"),
    TENTATIVE("tentative");

    private String value;

    EventResponseEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EventResponseEnum fromValue(String input) {
      for (EventResponseEnum b : EventResponseEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EventResponseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventResponseEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public EventResponseEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EventResponseEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("event_response")
  private EventResponseEnum eventResponse = null;

  public GetCharactersCharacterIdCalendarEventIdAttendees200Ok characterId(Integer characterId) {
    this.characterId = characterId;
    return this;
  }

   /**
   * character_id integer
   * @return characterId
  **/
  @Schema(description = "character_id integer")
  public Integer getCharacterId() {
    return characterId;
  }

  public void setCharacterId(Integer characterId) {
    this.characterId = characterId;
  }

  public GetCharactersCharacterIdCalendarEventIdAttendees200Ok eventResponse(EventResponseEnum eventResponse) {
    this.eventResponse = eventResponse;
    return this;
  }

   /**
   * event_response string
   * @return eventResponse
  **/
  @Schema(description = "event_response string")
  public EventResponseEnum getEventResponse() {
    return eventResponse;
  }

  public void setEventResponse(EventResponseEnum eventResponse) {
    this.eventResponse = eventResponse;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdCalendarEventIdAttendees200Ok getCharactersCharacterIdCalendarEventIdAttendees200Ok = (GetCharactersCharacterIdCalendarEventIdAttendees200Ok) o;
    return Objects.equals(this.characterId, getCharactersCharacterIdCalendarEventIdAttendees200Ok.characterId) &&
        Objects.equals(this.eventResponse, getCharactersCharacterIdCalendarEventIdAttendees200Ok.eventResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterId, eventResponse);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdCalendarEventIdAttendees200Ok {\n");
    
    sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
    sb.append("    eventResponse: ").append(toIndentedString(eventResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
