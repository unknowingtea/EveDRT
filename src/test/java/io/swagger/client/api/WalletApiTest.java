/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.BadRequest;
import io.swagger.client.model.ErrorLimited;
import io.swagger.client.model.Forbidden;
import io.swagger.client.model.GatewayTimeout;
import io.swagger.client.model.GetCharactersCharacterIdWalletJournal200Ok;
import io.swagger.client.model.GetCharactersCharacterIdWalletTransactions200Ok;
import io.swagger.client.model.GetCorporationsCorporationIdWallets200Ok;
import io.swagger.client.model.GetCorporationsCorporationIdWalletsDivisionJournal200Ok;
import io.swagger.client.model.GetCorporationsCorporationIdWalletsDivisionTransactions200Ok;
import io.swagger.client.model.InternalServerError;
import io.swagger.client.model.ServiceUnavailable;
import io.swagger.client.model.Unauthorized;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for WalletApi
 */
@Ignore
public class WalletApiTest {

    private final WalletApi api = new WalletApi();

    /**
     * Get character wallet journal
     *
     * Retrieve the given character&#x27;s wallet journal going 30 days back  --- Alternate route: &#x60;/latest/characters/{character_id}/wallet/journal/&#x60;  Alternate route: &#x60;/v6/characters/{character_id}/wallet/journal/&#x60;  --- This route is cached for up to 3600 seconds
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdWalletJournalTest() throws Exception {
        Integer characterId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<GetCharactersCharacterIdWalletJournal200Ok> response = api.getCharactersCharacterIdWalletJournal(characterId, datasource, ifNoneMatch, page, token);

        // TODO: test validations
    }
    /**
     * Get wallet transactions
     *
     * Get wallet transactions of a character  --- Alternate route: &#x60;/latest/characters/{character_id}/wallet/transactions/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/wallet/transactions/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/wallet/transactions/&#x60;  --- This route is cached for up to 3600 seconds
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdWalletTransactionsTest() throws Exception {
        Integer characterId = null;
        String datasource = null;
        Long fromId = null;
        String ifNoneMatch = null;
        String token = null;
        List<GetCharactersCharacterIdWalletTransactions200Ok> response = api.getCharactersCharacterIdWalletTransactions(characterId, datasource, fromId, ifNoneMatch, token);

        // TODO: test validations
    }
    /**
     * Returns a corporation&#x27;s wallet balance
     *
     * Get a corporation&#x27;s wallets  --- Alternate route: &#x60;/latest/corporations/{corporation_id}/wallets/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/wallets/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/wallets/&#x60;  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCorporationsCorporationIdWalletsTest() throws Exception {
        Integer corporationId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        List<GetCorporationsCorporationIdWallets200Ok> response = api.getCorporationsCorporationIdWallets(corporationId, datasource, ifNoneMatch, token);

        // TODO: test validations
    }
    /**
     * Get corporation wallet journal
     *
     * Retrieve the given corporation&#x27;s wallet journal for the given division going 30 days back  --- Alternate route: &#x60;/latest/corporations/{corporation_id}/wallets/{division}/journal/&#x60;  Alternate route: &#x60;/v4/corporations/{corporation_id}/wallets/{division}/journal/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCorporationsCorporationIdWalletsDivisionJournalTest() throws Exception {
        Integer corporationId = null;
        Integer division = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<GetCorporationsCorporationIdWalletsDivisionJournal200Ok> response = api.getCorporationsCorporationIdWalletsDivisionJournal(corporationId, division, datasource, ifNoneMatch, page, token);

        // TODO: test validations
    }
    /**
     * Get corporation wallet transactions
     *
     * Get wallet transactions of a corporation  --- Alternate route: &#x60;/latest/corporations/{corporation_id}/wallets/{division}/transactions/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/wallets/{division}/transactions/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/wallets/{division}/transactions/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCorporationsCorporationIdWalletsDivisionTransactionsTest() throws Exception {
        Integer corporationId = null;
        Integer division = null;
        String datasource = null;
        Long fromId = null;
        String ifNoneMatch = null;
        String token = null;
        List<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok> response = api.getCorporationsCorporationIdWalletsDivisionTransactions(corporationId, division, datasource, fromId, ifNoneMatch, token);

        // TODO: test validations
    }
}
