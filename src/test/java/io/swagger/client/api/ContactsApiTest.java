/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.BadRequest;
import io.swagger.client.model.ErrorLimited;
import io.swagger.client.model.Forbidden;
import io.swagger.client.model.GatewayTimeout;
import io.swagger.client.model.GetAlliancesAllianceIdContacts200Ok;
import io.swagger.client.model.GetAlliancesAllianceIdContactsLabels200Ok;
import io.swagger.client.model.GetCharactersCharacterIdContacts200Ok;
import io.swagger.client.model.GetCharactersCharacterIdContactsLabels200Ok;
import io.swagger.client.model.GetCorporationsCorporationIdContacts200Ok;
import io.swagger.client.model.GetCorporationsCorporationIdContactsLabels200Ok;
import io.swagger.client.model.InternalServerError;
import io.swagger.client.model.PostCharactersCharacterIdContactsError520;
import io.swagger.client.model.ServiceUnavailable;
import io.swagger.client.model.Unauthorized;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ContactsApi
 */
@Ignore
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    /**
     * Delete contacts
     *
     * Bulk delete contacts  --- Alternate route: &#x60;/latest/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/contacts/&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteCharactersCharacterIdContactsTest() throws Exception {
        Integer characterId = null;
        List<Integer> contactIds = null;
        String datasource = null;
        String token = null;
        api.deleteCharactersCharacterIdContacts(characterId, contactIds, datasource, token);

        // TODO: test validations
    }
    /**
     * Get alliance contacts
     *
     * Return contacts of an alliance  --- Alternate route: &#x60;/latest/alliances/{alliance_id}/contacts/&#x60;  Alternate route: &#x60;/v2/alliances/{alliance_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAlliancesAllianceIdContactsTest() throws Exception {
        Integer allianceId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<GetAlliancesAllianceIdContacts200Ok> response = api.getAlliancesAllianceIdContacts(allianceId, datasource, ifNoneMatch, page, token);

        // TODO: test validations
    }
    /**
     * Get alliance contact labels
     *
     * Return custom labels for an alliance&#x27;s contacts  --- Alternate route: &#x60;/latest/alliances/{alliance_id}/contacts/labels/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/contacts/labels/&#x60;  Alternate route: &#x60;/v1/alliances/{alliance_id}/contacts/labels/&#x60;  --- This route is cached for up to 300 seconds
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAlliancesAllianceIdContactsLabelsTest() throws Exception {
        Integer allianceId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        List<GetAlliancesAllianceIdContactsLabels200Ok> response = api.getAlliancesAllianceIdContactsLabels(allianceId, datasource, ifNoneMatch, token);

        // TODO: test validations
    }
    /**
     * Get contacts
     *
     * Return contacts of a character  --- Alternate route: &#x60;/latest/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdContactsTest() throws Exception {
        Integer characterId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<GetCharactersCharacterIdContacts200Ok> response = api.getCharactersCharacterIdContacts(characterId, datasource, ifNoneMatch, page, token);

        // TODO: test validations
    }
    /**
     * Get contact labels
     *
     * Return custom labels for a character&#x27;s contacts  --- Alternate route: &#x60;/latest/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contacts/labels/&#x60;  --- This route is cached for up to 300 seconds
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdContactsLabelsTest() throws Exception {
        Integer characterId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        List<GetCharactersCharacterIdContactsLabels200Ok> response = api.getCharactersCharacterIdContactsLabels(characterId, datasource, ifNoneMatch, token);

        // TODO: test validations
    }
    /**
     * Get corporation contacts
     *
     * Return contacts of a corporation  --- Alternate route: &#x60;/latest/corporations/{corporation_id}/contacts/&#x60;  Alternate route: &#x60;/v2/corporations/{corporation_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCorporationsCorporationIdContactsTest() throws Exception {
        Integer corporationId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<GetCorporationsCorporationIdContacts200Ok> response = api.getCorporationsCorporationIdContacts(corporationId, datasource, ifNoneMatch, page, token);

        // TODO: test validations
    }
    /**
     * Get corporation contact labels
     *
     * Return custom labels for a corporation&#x27;s contacts  --- Alternate route: &#x60;/latest/corporations/{corporation_id}/contacts/labels/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contacts/labels/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contacts/labels/&#x60;  --- This route is cached for up to 300 seconds
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCorporationsCorporationIdContactsLabelsTest() throws Exception {
        Integer corporationId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        List<GetCorporationsCorporationIdContactsLabels200Ok> response = api.getCorporationsCorporationIdContactsLabels(corporationId, datasource, ifNoneMatch, token);

        // TODO: test validations
    }
    /**
     * Add contacts
     *
     * Bulk add contacts with same settings  --- Alternate route: &#x60;/latest/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/contacts/&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postCharactersCharacterIdContactsTest() throws Exception {
        List<Integer> body = null;
        Float standing = null;
        Integer characterId = null;
        String datasource = null;
        List<Long> labelIds = null;
        String token = null;
        Boolean watched = null;
        List<Integer> response = api.postCharactersCharacterIdContacts(body, standing, characterId, datasource, labelIds, token, watched);

        // TODO: test validations
    }
    /**
     * Edit contacts
     *
     * Bulk edit contacts with same settings  --- Alternate route: &#x60;/latest/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/contacts/&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putCharactersCharacterIdContactsTest() throws Exception {
        List<Integer> body = null;
        Float standing = null;
        Integer characterId = null;
        String datasource = null;
        List<Long> labelIds = null;
        String token = null;
        Boolean watched = null;
        api.putCharactersCharacterIdContacts(body, standing, characterId, datasource, labelIds, token, watched);

        // TODO: test validations
    }
}
